#daemon off;
user                        root root;
worker_processes            auto;

worker_cpu_affinity         auto;	# openresty-1.9.15
#worker_rlimit_nofile        102400; # ???

error_log                   /var/log/ingress-gateway/error.log;
#pid                         /var/run/nginx.pid;

events {
    use                     epoll;
    worker_connections      1024;
    multi_accept            on;
}

stream {

}

http {
    server_tokens                   off;
    sendfile                        on;
    tcp_nodelay                     on;
    tcp_nopush                      on;
    keepalive_timeout               0;
    charset                         utf-8;

    include                         mime.types;
    default_type                    application/json;

    log_format                      main '[$time_local]`$http_x_up_calling_line_id`"$request"`"$http_user_agent"`$staTus`[$remote_addr]`$http_x_log_uid`"$http_referer"`$request_time`$body_bytes_sent`$http_x_forwarded_proto`$http_x_forwarded_for`$http_host`$http_cookie`$upstream_response_time`xd';
    client_header_buffer_size       4k;
    large_client_header_buffers     8 4k;
    server_names_hash_bucket_size   128;
    client_max_body_size            8m;

    client_header_timeout           30s;
    client_body_timeout             30s;
    send_timeout                    30s;
    lingering_close                 off;





    upstream beta1 {
        sticky name=beta1;
        server 127.0.0.1:80208  max_fails=5 fail_timeout=3s;
        server 127.0.0.1:8020  max_fails=5 fail_timeout=3s;
    }



    upstream beta2 {
        sticky name=beta2;
        server 127.0.0.1:80207  max_fails=5 fail_timeout=3s;
    }




    lua_shared_dict healthcheck     1m;
    lua_socket_log_errors           off;

    init_worker_by_lua_block {
        local hc = require "resty.upstream.healthcheck"

        local ok, err = hc.spawn_checker {
            shm = "healthcheck",
            upstream = "beta1",
            type = "http",
            http_req = "GET / HTTP/1.0\r\nHost: tomcat\r\n\r\n",
            interval = 2000,
            timeout = 2000,
            fall = 2,
            rise = 2,
            valid_statuses = {200, 302},
            concurrency = 10,
        }

        if not ok then
            ngx.log(ngx.ERR, "=======> failed to spawn health checker: ", err)
            return
        end
        local ok, err = hc.spawn_checker {
            shm = "healthcheck",
            upstream = "beta2",
            type = "http",
            http_req = "GET / HTTP/1.0\r\nHost: tomcat\r\n\r\n",
            interval = 2000,
            timeout = 2000,
            fall = 2,
            rise = 2,
            valid_statuses = {200, 302},
            concurrency = 10,
        }

        if not ok then
            ngx.log(ngx.ERR, "=======> failed to spawn health checker: ", err)
            return
        end
    }


    server {
        listen           58080;
        server_name      localhost 127.0.0.1;
        access_log       /var/log/ingress-gateway/ip-access.log  main;
        error_log        /var/log/ingress-gateway/admin.log error;

        location / {
            root   html;
            index  index.html index.htm;
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        #查看后端服务状态
        location /upstream/status {
            access_log off;
            default_type text/plain;
            content_by_lua_block {
                local hc = require "resty.upstream.healthcheck"
                ngx.say("Nginx worker PID:", ngx.worker.pid())
                ngx.print(hc.status_page())
            }
        }

        set $redis_host               '127.0.0.1';
        set $redis_port               '56379';
        set $redis_uds                '/var/run/redis/redis.sock';
        set $redis_connect_timeout    10000;
        set $redis_dbid               0;
        set $redis_pool_size          1000;
        set $redis_keepalive_timeout  90000;

        location /ab_admin {
            content_by_lua_file '../admin/ab_action.lua';
        }
    }

    lua_shared_dict api_root_sysConfig 1m;
    lua_shared_dict kv_api_root_upstream 100m;


    server {



        listen                        80;
        server_name                   zhouyi.com;

        access_log                    /var/log/ingress-gateway/vhost_access.log  main;
        error_log                     /var/log/ingress-gateway/vhost_error.log;

        # for support ssl


        # for support data zip

        gzip                          on;
        gzip_comp_level               5;
        gzip_http_version             1.1;
        gzip_types                    text/plain text/css application/json application/x-javascript
        text/xml application/xml      application/xml+rss text/javascript;
        gzip_proxied                  any;


        # for support backend server.
        # 后端default_backend的Web服务器可以通过X-Forwarded-For获取用户真实IP
        #proxy_redirect                  off;

        #proxy_next_upstream             error timeout invalid_header http_500 http_502 http_503 http_504;

        set $redis_host               '127.0.0.1';
        set $redis_port               '56379';
        set $redis_uds                '/var/run/redis/redis.sock';
        set $redis_connect_timeout    10000;
        set $redis_dbid               0;
        set $redis_pool_size          1000;
        set $redis_keepalive_timeout  90000;

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }


        location /abc/ {
        set $hostkey              zhouyi.com;
        set $sysConfig            api_root_sysConfig;
        set $kv_upstream          kv_api_root_upstream;
        #set $backend              'stable';
        set $backend              ;
        rewrite_by_lua_file       '../diversion/diversion.lua';

        proxy_headers_hash_max_size     51200;
        proxy_headers_hash_bucket_size  6400;
        proxy_set_header                X-Forwarded-For  $remote_addr;
        proxy_set_header                Host             $host;
        proxy_set_header                X-Real-IP        $remote_addr;
        proxy_set_header                X-Forwarded-For  $proxy_add_x_forwarded_for;

        proxy_pass                http://beta1/abc/;
        proxy_connect_timeout     3s;


    }


    }

    server {



        listen                        80;
        server_name                   zhouyi.com1;

        access_log                    /var/log/ingress-gateway/vhost_access.log  main;
        error_log                     /var/log/ingress-gateway/vhost_error.log;

        # for support ssl


        # for support data zip

        gzip                          on;
        gzip_comp_level               5;
        gzip_http_version             1.1;
        gzip_types                    text/plain text/css application/json application/x-javascript
        text/xml application/xml      application/xml+rss text/javascript;
        gzip_proxied                  any;


        # for support backend server.
        # 后端default_backend的Web服务器可以通过X-Forwarded-For获取用户真实IP
        #proxy_redirect                  off;

        #proxy_next_upstream             error timeout invalid_header http_500 http_502 http_503 http_504;

        set $redis_host               '127.0.0.1';
        set $redis_port               '56379';
        set $redis_uds                '/var/run/redis/redis.sock';
        set $redis_connect_timeout    10000;
        set $redis_dbid               0;
        set $redis_pool_size          1000;
        set $redis_keepalive_timeout  90000;

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }


        location /abc222/ {
        set $hostkey              zhouyi.com1;
        set $sysConfig            api_root_sysConfig;
        set $kv_upstream          kv_api_root_upstream;
        #set $backend              'stable';
        set $backend              ;
        rewrite_by_lua_file       '../diversion/diversion.lua';

        proxy_headers_hash_max_size     51200;
        proxy_headers_hash_bucket_size  6400;
        proxy_set_header                X-Forwarded-For  $remote_addr;
        proxy_set_header                Host             $host;
        proxy_set_header                X-Real-IP        $remote_addr;
        proxy_set_header                X-Forwarded-For  $proxy_add_x_forwarded_for;

        proxy_pass                http://beta2/abc222/;
        proxy_connect_timeout     3s;


    }


    }


    #生产环境下on, 开发环境下off
    lua_code_cache on;
    lua_package_path "../?.lua;../lib/?.lua;../lib/lua-resty-core/lib/?.lua;;";
    lua_need_request_body on;
}